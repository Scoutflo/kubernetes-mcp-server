apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "k8s-mcp-server.fullname" . }}-deployment
  namespace: {{ .Values.namespace.name }}
  labels:
    {{- include "k8s-mcp-server.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "k8s-mcp-server.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "k8s-mcp-server.selectorLabels" . | nindent 8 }}
        {{- if .Values.podLabels }}
        {{- toYaml .Values.podLabels | nindent 8 }}
        {{- end }}
      annotations:
        {{- if .Values.podAnnotations }}
        {{- toYaml .Values.podAnnotations | nindent 8 }}
        {{- end }}
    spec:
      serviceAccountName: {{ include "k8s-mcp-server.fullname" . }}-sa
      containers:
        - name: {{ include "k8s-mcp-server.fullname" . }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
          - name: http
            containerPort: {{ .Values.service.targetPort }}
          {{- if .Values.metrics.enabled }}
          - name: metrics
            containerPort: {{ .Values.metrics.port }}
          {{- end }}
          env:
            - name: AZURE_OPENAI_API_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "k8s-mcp-server.fullname" . }}-openai-credentials
                  key: AZURE_OPENAI_API_KEY
            - name: AZURE_OPENAI_ENDPOINT
              valueFrom:
                secretKeyRef:
                  name: {{ include "k8s-mcp-server.fullname" . }}-openai-credentials
                  key: AZURE_OPENAI_ENDPOINT
            - name: AZURE_OPENAI_DEPLOYMENT_NAME
              valueFrom:
                secretKeyRef:
                  name: {{ include "k8s-mcp-server.fullname" . }}-openai-credentials
                  key: AZURE_OPENAI_DEPLOYMENT_NAME
            - name: OPENAI_API_VERSION
              valueFrom:
                secretKeyRef:
                  name: {{ include "k8s-mcp-server.fullname" . }}-openai-credentials
                  key: OPENAI_API_VERSION
            - name: AZURE_OPENAI_MAX_TOKENS
              valueFrom:
                secretKeyRef:
                  name: {{ include "k8s-mcp-server.fullname" . }}-openai-credentials
                  key: AZURE_OPENAI_MAX_TOKENS
            - name: AZURE_OPENAI_TEMPERATURE
              valueFrom:
                secretKeyRef:
                  name: {{ include "k8s-mcp-server.fullname" . }}-openai-credentials
                  key: AZURE_OPENAI_TEMPERATURE
            - name: AZURE_OPENAI_TOP_P
              valueFrom:  
                secretKeyRef:
                  name: {{ include "k8s-mcp-server.fullname" . }}-openai-credentials
                  key: AZURE_OPENAI_TOP_P
            - name: ARGOCD_ENDPOINT
              valueFrom:
                secretKeyRef:
                  name: {{ include "k8s-mcp-server.fullname" . }}-argocd-credentials
                  key: ARGOCD_ENDPOINT
            - name: ARGOCD_NAMESPACE
              valueFrom:
                secretKeyRef:
                  name: {{ include "k8s-mcp-server.fullname" . }}-argocd-credentials
                  key: ARGOCD_NAMESPACE
            - name: PROMETHEUS_ENDPOINT
              valueFrom:
                secretKeyRef:
                  name: {{ include "k8s-mcp-server.fullname" . }}-prometheus-credentials
                  key: PROMETHEUS_ENDPOINT
            - name: GRAFANA_URL
              valueFrom:
                secretKeyRef:
                  name: {{ include "k8s-mcp-server.fullname" . }}-grafana-credentials
                  key: GRAFANA_URL
            - name: GRAFANA_API_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "k8s-mcp-server.fullname" . }}-grafana-credentials
                  key: GRAFANA_API_KEY
          {{- if .Values.probes.liveness.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.probes.liveness.path }}
              port: {{ .Values.service.healthPort }}
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.liveness.timeoutSeconds }}
            failureThreshold: {{ .Values.probes.liveness.failureThreshold }}
            successThreshold: {{ .Values.probes.liveness.successThreshold }}
          {{- end }}
          {{- if .Values.probes.readiness.enabled }}
          readinessProbe:
            httpGet:
              path: {{ .Values.probes.readiness.path }}
              port: {{ .Values.service.healthPort }}
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
            failureThreshold: {{ .Values.probes.readiness.failureThreshold }}
            successThreshold: {{ .Values.probes.readiness.successThreshold }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- if .Values.image.dockerConfigSecret }}
      imagePullSecrets:
        - name: {{ include "k8s-mcp-server.fullname" . }}-docker-config-secret
      {{- end }} 