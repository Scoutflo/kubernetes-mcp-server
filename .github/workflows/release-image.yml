name: Release as container image

on:
  push:
    branches:
      - main
      - release/dev
    tags:
      - '*'

jobs:
  test:
    name: Tests the build and caches the layers
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Test build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: false
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  build-pre-prod:
    needs: [test]
    name: Build and push the pre-prod image to the ECR registry
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    if: github.ref == 'refs/heads/release/dev'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Docker meta tags
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: |
            ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}
          labels: |
            maintainer=${{ github.actor }}
            org.opencontainers.image.title=${{ github.repository }}
            org.opencontainers.image.description="Docker image for ${{ github.repository }}"
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.documentation=${{ github.repositoryUrl }}/blob/release/dev/README.md
          tags: |
            type=raw,value=pre-prod-${{ github.run_number }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  build-prod:
    needs: [test]
    name: Build and push the production image to the ECR registry
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Docker meta tags
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: |
            ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}
          labels: |
            maintainer=${{ github.actor }}
            org.opencontainers.image.title=${{ github.repository }}
            org.opencontainers.image.description="Docker image for ${{ github.repository }}"
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.documentation=${{ github.repositoryUrl }}/blob/main/README.md
          tags: |
            type=raw,value=production-${{ github.run_number }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy-pre-prod:
    name: Deploy pre-prod image to GCP VM
    needs: [build-pre-prod]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/release/dev'
    steps:
      - name: Install SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.GCP_SSH_KEY }}
      - name: Deploy to GCP VM
        env:
          ECR_IMAGE: ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:pre-prod-${{ github.run_number }}
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.GCP_VM_USER }}@${{ secrets.GCP_VM_HOST }} <<EOF
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            export AWS_REGION=${{ secrets.AWS_REGION }}
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
            docker pull $ECR_IMAGE
            docker stop kubernetes-mcp-server || true
            docker rm kubernetes-mcp-server || true
            docker network create k8s-mcp-network || true
            docker run -d --name kubernetes-mcp-server \
              --restart unless-stopped \
              --network k8s-mcp-network \
              -p 8081:8081 \
              -p 8082:8082 \
              -e AZURE_OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
              -e AZURE_OPENAI_ENDPOINT=${{ secrets.OPENAI_ENDPOINT }} \
              -e AZURE_OPENAI_DEPLOYMENT_NAME=${{ secrets.OPENAI_DEPLOYMENT_NAME }} \
              -e OPENAI_API_VERSION=${{ secrets.OPENAI_API_VERSION }} \
              -e AZURE_OPENAI_MAX_TOKENS=${{ secrets.OPENAI_MAX_TOKENS }} \
              -e AZURE_OPENAI_TEMPERATURE=${{ secrets.OPENAI_TEMPERATURE }} \
              -e AZURE_OPENAI_TOP_P=${{ secrets.OPENAI_TOP_P }} \
              $IMAGE
            echo "Container status:"
            docker ps | grep kubernetes-mcp-server
            echo "Port check:"
            (ss -tuln || netstat -tuln) | grep 8081 || true
            echo "Initial logs:"
            docker logs --tail 50 kubernetes-mcp-server
          EOF

  deploy-prod:
    name: Deploy prod image to GCP VM
    needs: [build-prod]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Install SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.GCP_SSH_KEY }}
      - name: Deploy to GCP VM
        env:
            ECR_IMAGE: ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:production-${{ github.run_number }}
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.GCP_VM_USER }}@${{ secrets.GCP_VM_HOST }} <<EOF
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            export AWS_REGION=${{ secrets.AWS_REGION }}
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
            docker pull $ECR_IMAGE
            docker stop kubernetes-mcp-server || true
            docker rm kubernetes-mcp-server || true
            docker network create k8s-mcp-network || true
            docker run -d --name kubernetes-mcp-server \
              --restart unless-stopped \
              --network k8s-mcp-network \
              -p 8081:8081 \
              -p 8082:8082 \
              -e AZURE_OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
              -e AZURE_OPENAI_ENDPOINT=${{ secrets.OPENAI_ENDPOINT }} \
              -e AZURE_OPENAI_DEPLOYMENT_NAME=${{ secrets.OPENAI_DEPLOYMENT_NAME }} \
              -e OPENAI_API_VERSION=${{ secrets.OPENAI_API_VERSION }} \
              -e AZURE_OPENAI_MAX_TOKENS=${{ secrets.OPENAI_MAX_TOKENS }} \
              -e AZURE_OPENAI_TEMPERATURE=${{ secrets.OPENAI_TEMPERATURE }} \
              -e AZURE_OPENAI_TOP_P=${{ secrets.OPENAI_TOP_P }} \
              $IMAGE
            echo "Container status:"
            docker ps | grep kubernetes-mcp-server
            echo "Port check:"
            (ss -tuln || netstat -tuln) | grep 8081 || true
            echo "Initial logs:"
            docker logs --tail 50 kubernetes-mcp-server
          EOF


