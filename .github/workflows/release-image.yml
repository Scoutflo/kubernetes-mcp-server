name: Release as container image

on:
  push:
    branches:
      - main
      - release/dev
    tags:
      - '*'

jobs:
  test:
    name: Tests the build and caches the layers
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Test build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: false
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  build-pre-prod:
    needs: [test]
    name: Build and push the pre-prod image to the Docker registry
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    if: github.ref == 'refs/heads/release/dev'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Docker meta tags
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: |
            ${{ secrets.DOCKERHUB_USERNAME }}/kubernetes_mcp_server
          labels: |
            maintainer=${{ github.actor }}
            org.opencontainers.image.title=${{ github.repository }}
            org.opencontainers.image.description="Docker image for ${{ github.repository }}"
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.documentation=${{ github.repositoryUrl }}/blob/release/dev/README.md
          tags: |
            type=raw,value=pre-prod-${{ github.run_number }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  helm-package-push-pre-prod:
    name: Package and push Helm chart (dev)
    runs-on: ubuntu-latest
    needs: [build-pre-prod]
    permissions:
      contents: read
      packages: write
    if: github.ref == 'refs/heads/release/dev'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'
          
      - name: Set version
        id: set_version
        run: |
          # Use run_number for chart version
          echo "chart_version=0.1.${{ github.run_number }}" >> $GITHUB_OUTPUT
          echo "image_tag=pre-prod-${{ github.run_number }}" >> $GITHUB_OUTPUT
          echo "Chart version: 0.1.${{ github.run_number }}"
          echo "Image tag: pre-prod-${{ github.run_number }}"
            
      - name: Update Chart.yaml version
        run: |
          echo "Updating Chart.yaml with version: ${{ steps.set_version.outputs.chart_version }}"
          echo "Docker image tag: ${{ steps.set_version.outputs.image_tag }}"
          
          # Print the current Chart.yaml
          echo "Before update:"
          cat helm/k8s-mcp-server/Chart.yaml
          
          # Update with flexible pattern matching
          sed -i "s/version:.*$/version: ${{ steps.set_version.outputs.chart_version }}/" helm/k8s-mcp-server/Chart.yaml
          sed -i "s/appVersion:.*$/appVersion: \"${{ steps.set_version.outputs.image_tag }}\"/" helm/k8s-mcp-server/Chart.yaml
          
          echo "After update:"
          cat helm/k8s-mcp-server/Chart.yaml
          
      - name: Update values.yaml with new image tag
        run: |
          echo "Updating values.yaml with image tag: ${{ steps.set_version.outputs.image_tag }}"
          
          # Print the current values.yaml image section
          echo "Before update:"
          grep -A 3 "image:" helm/k8s-mcp-server/values.yaml
          
          # Update the image tag in values.yaml
          sed -i "/image:/,/tag:/ s/tag:.*$/tag: ${{ steps.set_version.outputs.image_tag }}/" helm/k8s-mcp-server/values.yaml
          
          echo "After update:"
          grep -A 3 "image:" helm/k8s-mcp-server/values.yaml
          
      - name: Package Helm chart
        run: |
          helm package helm/k8s-mcp-server
          
      - name: Login to GitHub Container Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | helm registry login ghcr.io -u ${{ github.repository_owner }} --password-stdin
          
      - name: Push Helm chart to GitHub Container Registry
        run: |
          version="${{ steps.set_version.outputs.chart_version }}"
          repo_owner=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          
          # Push the chart
          echo "Pushing Helm chart version $version to GitHub Container Registry"
          helm push --debug kubernetes-mcp-server-${version}.tgz oci://ghcr.io/${repo_owner}/kubernetes-mcp-server
          
  build-prod:
    needs: [test]
    name: Build and push the production image to the Docker registry
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Docker meta tags
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: |
            ${{ secrets.DOCKERHUB_USERNAME }}/kubernetes_mcp_server
          labels: |
            maintainer=${{ github.actor }}
            org.opencontainers.image.title=${{ github.repository }}
            org.opencontainers.image.description="Docker image for ${{ github.repository }}"
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.documentation=${{ github.repositoryUrl }}/blob/main/README.md
          tags: |
            type=raw,value=production-${{ github.run_number }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  helm-package-push-production:
    name: Package and push Helm chart (prod)
    runs-on: ubuntu-latest
    needs: [build-prod]
    permissions:
      contents: read
      packages: write
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'
          
      - name: Set version
        id: set_version
        run: |
          # Use run_number for chart version
          echo "chart_version=0.1.${{ github.run_number }}" >> $GITHUB_OUTPUT
          echo "image_tag=production-${{ github.run_number }}" >> $GITHUB_OUTPUT
          echo "Chart version: 0.1.${{ github.run_number }}"
          echo "Image tag: production-${{ github.run_number }}"
          
      - name: Update Chart.yaml version
        run: |
          echo "Updating Chart.yaml with version: ${{ steps.set_version.outputs.chart_version }}"
          echo "Docker image tag: ${{ steps.set_version.outputs.image_tag }}"
          
          # Print the current Chart.yaml
          echo "Before update:"
          cat helm/k8s-mcp-server/Chart.yaml
          
          # Update with flexible pattern matching
          sed -i "s/version:.*$/version: ${{ steps.set_version.outputs.chart_version }}/" helm/k8s-mcp-server/Chart.yaml
          sed -i "s/appVersion:.*$/appVersion: \"${{ steps.set_version.outputs.image_tag }}\"/" helm/k8s-mcp-server/Chart.yaml
          
          echo "After update:"
          cat helm/k8s-mcp-server/Chart.yaml
          
      - name: Update values.yaml with new image tag
        run: |
          echo "Updating values.yaml with image tag: ${{ steps.set_version.outputs.image_tag }}"
          
          # Print the current values.yaml image section
          echo "Before update:"
          grep -A 3 "image:" helm/k8s-mcp-server/values.yaml
          
          # Update the image tag in values.yaml
          sed -i "/image:/,/tag:/ s/tag:.*$/tag: ${{ steps.set_version.outputs.image_tag }}/" helm/k8s-mcp-server/values.yaml
          
          echo "After update:"
          grep -A 3 "image:" helm/k8s-mcp-server/values.yaml
          
      - name: Package Helm chart
        run: |
          helm package helm/k8s-mcp-server
          
      - name: Login to GitHub Container Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | helm registry login ghcr.io -u ${{ github.repository_owner }} --password-stdin
          
      - name: Push Helm chart to GitHub Container Registry
        run: |
          version="${{ steps.set_version.outputs.chart_version }}"
          repo_owner=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          
          # Push the chart
          echo "Pushing Helm chart version $version to GitHub Container Registry"
          helm push --debug kubernetes-mcp-server-${version}.tgz oci://ghcr.io/${repo_owner}/kubernetes-mcp-server

  
